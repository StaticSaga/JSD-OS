#ifndef STD_UTILITY_H
#define STD_UTILITY_H

#include <type_traits>

namespace std {
	template< class T >
	constexpr remove_reference_t<T>&& move(T&& t) noexcept {
		return static_cast<typename std::remove_reference<T>::type&&>(t);
	}

	template<typename T> void swap(T& t1, T& t2) {
		T temp = std::move(t1);
		t1 = std::move(t2);
		t2 = std::move(temp);
	}
}
#endif