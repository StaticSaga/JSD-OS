#ifndef STD_TYPE_TRAITS_H
#define STD_TYPE_TRAITS_H
namespace std {

	template<class T, T v>
	struct integral_constant 
	{
		static constexpr T value = v;
		using value_type = T;
		using type = integral_constant;
		constexpr operator value_type() const noexcept { return value; }
		constexpr value_type operator()() const noexcept { return value; } 
	};

	template<bool B, class T = void>
	struct enable_if {};

	template<class T>
	struct enable_if<true, T> { typedef T type; };

	template< bool B, class T = void >
	using enable_if_t = typename enable_if<B, T>::type;

	template< class T > struct remove_reference { typedef T type; };
	template< class T > struct remove_reference<T&> { typedef T type; };
	template< class T > struct remove_reference<T&&> { typedef T type; };

	template< class T >
	using remove_reference_t = typename remove_reference<T>::type;

	template <class _Tp> struct is_trivially_copyable
		: public integral_constant<bool, __is_trivially_copyable(_Tp)>
	{};

	template< class T >
	inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;
}
#endif