#ifndef STD_VECTOR_H
#define STD_VECTOR_H

extern "C" {
#include <string.h>
}

#include <algorithm>
#include <utility>
#include <new>

namespace std {
	template<class T> class vector;
};

template<class T>
class std::vector {
public:
	using iterator = T*;
	using const_iterator = const T*;

	constexpr vector() :
		m_begin(nullptr),
		m_end(m_begin),
		m_capacity(0)
	{}

	constexpr vector(const T* s, size_t len)
	{
		m_capacity = len;
		m_begin = new T[m_capacity];
		m_end = m_begin + len;

		std::copy(s, s + len, begin());
	}

	constexpr vector(size_t count, const T& value = {})
	{
		m_capacity = count;
		m_begin = new T[m_capacity];
		m_end = m_begin + count;

		std::fill(begin(), end(), value);
	}

	~vector()
	{
		delete[] m_begin;
	}

	constexpr iterator begin()
	{
		return m_begin;
	}

	constexpr iterator end()
	{
		return m_end;
	}

	constexpr const_iterator cbegin() const noexcept
	{
		return m_begin;
	}

	constexpr const_iterator cend() const noexcept
	{
		return m_end;
	}

	constexpr size_t size() const
	{
		return cend() - cbegin();
	}

	constexpr size_t length() const
	{
		return size();
	}

	constexpr size_t capacity() const
	{
		return m_capacity;
	}

	constexpr T& operator[](size_t n)
	{
		return m_begin[n];
	}

	constexpr const T& operator[](size_t n) const
	{
		return m_begin[n];
	}

	constexpr void reserve(size_t n = 0)
	{
		if(n > capacity())
		{
			auto sz = size();	
			T* new_ptr = new T[n];

			std::move(begin(), end(), new_ptr);

			delete[] m_begin;

			m_capacity = n;
			m_begin = new_ptr;
			m_end = m_begin + sz;
		}
	}

	constexpr T* data() const
	{
		return m_begin;
	}

	constexpr vector(const vector& v)
	{
		m_capacity = v.size();
		m_begin = new T[m_capacity];
		m_end = m_begin + v.size();

		std::copy(v.cbegin(), v.cend(), begin());
	}

	constexpr vector(vector&& v) noexcept : vector()
	{
		swap(v);
	}

	constexpr vector& operator=(const vector& v)
	{
		delete[] m_begin;

		m_capacity = v.size();
		m_begin = new T[m_capacity];
		m_end = m_begin + v.size();
		
		std::copy(v.cbegin(), v.cend(), begin());
		return *this;
	}

	constexpr vector& operator=(vector&& v) noexcept
	{
		swap(v);
		return *this;
	}

	constexpr void swap(vector& v) noexcept
	{
		std::swap(m_capacity, v.m_capacity);
		std::swap(m_begin, v.m_begin);
		std::swap(m_end, v.m_end);
	}

	constexpr void push_back(const T& c)
	{
		emplace_back(c);
	}

	template <class... Args>
	constexpr void emplace_back(Args&&... args)
	{
		if(size() + 1 > capacity())
		{
			reserve((m_capacity + 1) * 2);
		}
		new(m_end++) T{std::forward<Args>(args)...};
	}

	constexpr bool empty()
	{
		return size() == 0;
	}

	constexpr void pop_back()
	{
		back().~T();
		--m_end;
	}

	constexpr const T& front() const
	{
		return *m_begin;
	}

	constexpr T& front()
	{
		return *m_begin;
	}

	constexpr const T& back() const
	{
		return *(m_end - 1);
	}

	constexpr T& back()
	{
		return *(m_end - 1);
	}

	constexpr void clear()
	{
		m_end = m_begin;
	}

	constexpr iterator erase(const_iterator pos)
	{
		auto index = (pos - cbegin());

		std::move(pos + 1, cend(), begin() + index);
		pop_back();
		return end();
	}

	constexpr iterator insert(const_iterator pos, const T& value)
	{
		reserve(size() + 1);
		std::move_backward(pos, cend(), end() + 1);
		++m_end;

		auto index = (pos - cbegin());
		auto it = begin() + index;

		*it = value;

		return it;
	}


private:
	T* m_begin;
	T* m_end;
	size_t m_capacity;
};
#endif